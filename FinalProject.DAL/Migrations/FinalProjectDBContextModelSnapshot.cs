// <auto-generated />
using System;
using FinalProject.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProject.DAL.Migrations
{
    [DbContext(typeof(FinalProjectDBContext))]
    partial class FinalProjectDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinalProject.BO.Agreement", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly>("AgreementDate")
                        .HasColumnType("date");

                    b.Property<string>("CreditId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DealerCarId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Loiid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LOIId");

                    b.Property<string>("MethodPayment")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Spid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SPId");

                    b.HasKey("AgreementId")
                        .HasName("PK__Agreemen__0A3082C3FD860975");

                    b.HasIndex("CreditId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerCarId");

                    b.HasIndex("Spid");

                    b.HasIndex(new[] { "Loiid" }, "UQ__Agreemen__E21E1B4DF2A39B1F")
                        .IsUnique();

                    b.ToTable("Agreement", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Car", b =>
                {
                    b.Property<string>("CarId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("BasePrice")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("CarId")
                        .HasName("PK__Car__68A0342E2DDE18FD");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Consultation", b =>
                {
                    b.Property<string>("ConsultId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("ConsultDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerBudget")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Spid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SPId");

                    b.HasKey("ConsultId")
                        .HasName("PK__Consulta__28859B35C3BE7640");

                    b.HasIndex("Spid");

                    b.HasIndex(new[] { "ScheduleId" }, "UQ__Consulta__9C8A5B485E7C1B57")
                        .IsUnique()
                        .HasFilter("[ScheduleId] IS NOT NULL");

                    b.ToTable("Consultation", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Credit", b =>
                {
                    b.Property<string>("CreditId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Bunga")
                        .HasColumnType("int");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("MonthlyPayment")
                        .HasColumnType("int");

                    b.Property<int>("NominalKredit")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("StatusCredit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("CreditId")
                        .HasName("PK__Credit__ED5ED0BB4FDED891");

                    b.HasIndex("CustomerId");

                    b.ToTable("Credit", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("IdCardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Tdid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TDId");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64D8565529E2");

                    b.HasIndex(new[] { "Tdid" }, "UQ__Customer__B7317AA5C135F192")
                        .IsUnique()
                        .HasFilter("[TDId] IS NOT NULL");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Dealer", b =>
                {
                    b.Property<string>("DealerId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DealerAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DealerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TaxRate")
                        .HasColumnType("int");

                    b.HasKey("DealerId")
                        .HasName("PK__Dealer__CA2F8EB23B9D453B");

                    b.ToTable("Dealer", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.DealerCar", b =>
                {
                    b.Property<string>("DealerCarId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CarId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("DealerCarPrice")
                        .HasColumnType("int");

                    b.Property<string>("DealerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("DealerCarId")
                        .HasName("PK__DealerCa__7DD0B586BE23DD5E");

                    b.HasIndex("CarId");

                    b.HasIndex("DealerId");

                    b.ToTable("DealerCar", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuestId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("GuestId")
                        .HasName("PK__Guest__0C423C12FC1E9990");

                    b.ToTable("Guest", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.LetterOfIntent", b =>
                {
                    b.Property<string>("Loiid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LOIId");

                    b.Property<int>("BookingFee")
                        .HasColumnType("int");

                    b.HasKey("Loiid")
                        .HasName("PK__LetterOf__E21E1B4C9E363136");

                    b.ToTable("LetterOfIntent", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.OrderCust", b =>
                {
                    b.Property<string>("Ocid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("OCId");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Dcid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("DCId");

                    b.Property<string>("Loiid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LOIId");

                    b.HasKey("Ocid")
                        .HasName("PK__OrderCus__A2E5E9FC1A764012");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Dcid");

                    b.HasIndex("Loiid");

                    b.ToTable("OrderCust", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.OtherBenefit", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Benefit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AgreementId")
                        .HasName("PK__OtherBen__0A3082C32F234FA7");

                    b.ToTable("OtherBenefit", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.PaymentHistory", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AgreementId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Nominal")
                        .HasColumnType("int");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<int?>("PaymentLeft")
                        .HasColumnType("int");

                    b.HasKey("PaymentId")
                        .HasName("PK__PaymentH__9B556A38248B13A0");

                    b.HasIndex("AgreementId");

                    b.ToTable("PaymentHistory", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.SalesPerson", b =>
                {
                    b.Property<string>("Spid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SPId");

                    b.Property<string>("DealerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SalesName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Spid")
                        .HasName("PK__SalesPer__F4306129AC01A97B");

                    b.HasIndex("DealerId");

                    b.ToTable("SalesPerson", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Scheduling", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<DateTime>("AvailableEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("AvailableStart")
                        .HasColumnType("datetime");

                    b.Property<string>("DealerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Scheduli__9C8A5B4930CCD65E");

                    b.HasIndex("DealerId");

                    b.HasIndex("GuestId");

                    b.ToTable("Scheduling", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.TestDrive", b =>
                {
                    b.Property<string>("Tdid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TDId");

                    b.Property<string>("ConsultId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DealerCarId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Spid")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SPId");

                    b.Property<DateTime>("Tddate")
                        .HasColumnType("datetime")
                        .HasColumnName("TDDate");

                    b.HasKey("Tdid")
                        .HasName("PK__TestDriv__B7317AA4CBF1953F");

                    b.HasIndex("ConsultId");

                    b.HasIndex("DealerCarId");

                    b.HasIndex("Spid");

                    b.HasIndex(new[] { "ScheduleId" }, "UQ__TestDriv__9C8A5B481FF293B3")
                        .IsUnique()
                        .HasFilter("[ScheduleId] IS NOT NULL");

                    b.ToTable("TestDrive", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Warranty", b =>
                {
                    b.Property<string>("WarrantyId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AgreementId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("WarrantyPeriodDays")
                        .HasColumnType("int");

                    b.HasKey("WarrantyId")
                        .HasName("PK__Warranty__2ED31813A2600B22");

                    b.HasIndex(new[] { "AgreementId" }, "UQ__Warranty__0A3082C2D84397B5")
                        .IsUnique()
                        .HasFilter("[AgreementId] IS NOT NULL");

                    b.ToTable("Warranty", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.WarrantyClaim", b =>
                {
                    b.Property<string>("ClaimId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceCenter")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceCost")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ServiceDate")
                        .HasColumnType("date");

                    b.Property<string>("WarrantyId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ClaimId")
                        .HasName("PK__Warranty__EF2E139BB6417D70");

                    b.HasIndex("WarrantyId");

                    b.ToTable("WarrantyClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FinalProject.BO.Agreement", b =>
                {
                    b.HasOne("FinalProject.BO.Credit", "Credit")
                        .WithMany("Agreements")
                        .HasForeignKey("CreditId")
                        .HasConstraintName("FK__Agreement__Credi__6383C8BA");

                    b.HasOne("FinalProject.BO.Customer", "Customer")
                        .WithMany("Agreements")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__Custo__628FA481");

                    b.HasOne("FinalProject.BO.DealerCar", "DealerCar")
                        .WithMany("Agreements")
                        .HasForeignKey("DealerCarId")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__Deale__66603565");

                    b.HasOne("FinalProject.BO.LetterOfIntent", "Loi")
                        .WithOne("Agreement")
                        .HasForeignKey("FinalProject.BO.Agreement", "Loiid")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__LOIId__6477ECF3");

                    b.HasOne("FinalProject.BO.SalesPerson", "Sp")
                        .WithMany("Agreements")
                        .HasForeignKey("Spid")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__SPId__656C112C");

                    b.Navigation("Credit");

                    b.Navigation("Customer");

                    b.Navigation("DealerCar");

                    b.Navigation("Loi");

                    b.Navigation("Sp");
                });

            modelBuilder.Entity("FinalProject.BO.Consultation", b =>
                {
                    b.HasOne("FinalProject.BO.Scheduling", "Schedule")
                        .WithOne("Consultation")
                        .HasForeignKey("FinalProject.BO.Consultation", "ScheduleId")
                        .HasConstraintName("FK__Consultat__Sched__45F365D3");

                    b.HasOne("FinalProject.BO.SalesPerson", "Sp")
                        .WithMany("Consultations")
                        .HasForeignKey("Spid")
                        .IsRequired()
                        .HasConstraintName("FK__Consultati__SPId__46E78A0C");

                    b.Navigation("Schedule");

                    b.Navigation("Sp");
                });

            modelBuilder.Entity("FinalProject.BO.Credit", b =>
                {
                    b.HasOne("FinalProject.BO.Customer", "Customer")
                        .WithMany("Credits")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Credit__Customer__5EBF139D");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FinalProject.BO.Customer", b =>
                {
                    b.HasOne("FinalProject.BO.TestDrive", "Td")
                        .WithOne("Customer")
                        .HasForeignKey("FinalProject.BO.Customer", "Tdid")
                        .HasConstraintName("FK__Customer__TDId__571DF1D5");

                    b.Navigation("Td");
                });

            modelBuilder.Entity("FinalProject.BO.DealerCar", b =>
                {
                    b.HasOne("FinalProject.BO.Car", "Car")
                        .WithMany("DealerCars")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__DealerCar__CarId__4BAC3F29");

                    b.HasOne("FinalProject.BO.Dealer", "Dealer")
                        .WithMany("DealerCars")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__DealerCar__Deale__4CA06362");

                    b.Navigation("Car");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("FinalProject.BO.OrderCust", b =>
                {
                    b.HasOne("FinalProject.BO.Customer", "Customer")
                        .WithMany("OrderCusts")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderCust__Custo__59FA5E80");

                    b.HasOne("FinalProject.BO.DealerCar", "Dc")
                        .WithMany("OrderCusts")
                        .HasForeignKey("Dcid")
                        .IsRequired()
                        .HasConstraintName("FK__OrderCust__DCId__5AEE82B9");

                    b.HasOne("FinalProject.BO.LetterOfIntent", "Loi")
                        .WithMany("OrderCusts")
                        .HasForeignKey("Loiid")
                        .IsRequired()
                        .HasConstraintName("FK__OrderCust__LOIId__5BE2A6F2");

                    b.Navigation("Customer");

                    b.Navigation("Dc");

                    b.Navigation("Loi");
                });

            modelBuilder.Entity("FinalProject.BO.OtherBenefit", b =>
                {
                    b.HasOne("FinalProject.BO.Agreement", "Agreement")
                        .WithOne("OtherBenefit")
                        .HasForeignKey("FinalProject.BO.OtherBenefit", "AgreementId")
                        .IsRequired()
                        .HasConstraintName("FK__OtherBene__Agree__6C190EBB");

                    b.Navigation("Agreement");
                });

            modelBuilder.Entity("FinalProject.BO.PaymentHistory", b =>
                {
                    b.HasOne("FinalProject.BO.Agreement", "Agreement")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("AgreementId")
                        .IsRequired()
                        .HasConstraintName("FK__PaymentHi__Agree__693CA210");

                    b.Navigation("Agreement");
                });

            modelBuilder.Entity("FinalProject.BO.SalesPerson", b =>
                {
                    b.HasOne("FinalProject.BO.Dealer", "Dealer")
                        .WithMany("SalesPeople")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesPers__Deale__3D5E1FD2");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("FinalProject.BO.Scheduling", b =>
                {
                    b.HasOne("FinalProject.BO.Dealer", "Dealer")
                        .WithMany("Schedulings")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__Schedulin__Deale__4222D4EF");

                    b.HasOne("FinalProject.BO.Guest", "Guest")
                        .WithMany("Schedulings")
                        .HasForeignKey("GuestId")
                        .IsRequired()
                        .HasConstraintName("FK__Schedulin__Guest__412EB0B6");

                    b.Navigation("Dealer");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("FinalProject.BO.TestDrive", b =>
                {
                    b.HasOne("FinalProject.BO.Consultation", "Consult")
                        .WithMany("TestDrives")
                        .HasForeignKey("ConsultId")
                        .HasConstraintName("FK__TestDrive__Consu__5070F446");

                    b.HasOne("FinalProject.BO.DealerCar", "DealerCar")
                        .WithMany("TestDrives")
                        .HasForeignKey("DealerCarId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__Deale__534D60F1");

                    b.HasOne("FinalProject.BO.Scheduling", "Schedule")
                        .WithOne("TestDrive")
                        .HasForeignKey("FinalProject.BO.TestDrive", "ScheduleId")
                        .HasConstraintName("FK__TestDrive__Sched__5165187F");

                    b.HasOne("FinalProject.BO.SalesPerson", "Sp")
                        .WithMany("TestDrives")
                        .HasForeignKey("Spid")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__SPId__52593CB8");

                    b.Navigation("Consult");

                    b.Navigation("DealerCar");

                    b.Navigation("Schedule");

                    b.Navigation("Sp");
                });

            modelBuilder.Entity("FinalProject.BO.Warranty", b =>
                {
                    b.HasOne("FinalProject.BO.Agreement", "Agreement")
                        .WithOne("Warranty")
                        .HasForeignKey("FinalProject.BO.Warranty", "AgreementId")
                        .HasConstraintName("FK__Warranty__Agreem__6FE99F9F");

                    b.Navigation("Agreement");
                });

            modelBuilder.Entity("FinalProject.BO.WarrantyClaim", b =>
                {
                    b.HasOne("FinalProject.BO.Warranty", "Warranty")
                        .WithMany("WarrantyClaims")
                        .HasForeignKey("WarrantyId")
                        .IsRequired()
                        .HasConstraintName("FK__WarrantyC__Warra__72C60C4A");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalProject.BO.Agreement", b =>
                {
                    b.Navigation("OtherBenefit");

                    b.Navigation("PaymentHistories");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("FinalProject.BO.Car", b =>
                {
                    b.Navigation("DealerCars");
                });

            modelBuilder.Entity("FinalProject.BO.Consultation", b =>
                {
                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("FinalProject.BO.Credit", b =>
                {
                    b.Navigation("Agreements");
                });

            modelBuilder.Entity("FinalProject.BO.Customer", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("Credits");

                    b.Navigation("OrderCusts");
                });

            modelBuilder.Entity("FinalProject.BO.Dealer", b =>
                {
                    b.Navigation("DealerCars");

                    b.Navigation("SalesPeople");

                    b.Navigation("Schedulings");
                });

            modelBuilder.Entity("FinalProject.BO.DealerCar", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("OrderCusts");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("FinalProject.BO.Guest", b =>
                {
                    b.Navigation("Schedulings");
                });

            modelBuilder.Entity("FinalProject.BO.LetterOfIntent", b =>
                {
                    b.Navigation("Agreement");

                    b.Navigation("OrderCusts");
                });

            modelBuilder.Entity("FinalProject.BO.SalesPerson", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("Consultations");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("FinalProject.BO.Scheduling", b =>
                {
                    b.Navigation("Consultation");

                    b.Navigation("TestDrive");
                });

            modelBuilder.Entity("FinalProject.BO.TestDrive", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FinalProject.BO.Warranty", b =>
                {
                    b.Navigation("WarrantyClaims");
                });
#pragma warning restore 612, 618
        }
    }
}

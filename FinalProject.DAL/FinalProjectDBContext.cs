// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using FinalProject.BO;

namespace FinalProject.DAL;

public partial class FinalProjectDBContext : IdentityDbContext
{
    public FinalProjectDBContext(DbContextOptions<FinalProjectDBContext> options)
        : base(options)
    {
    }

    public FinalProjectDBContext()
    {
    }

    public virtual DbSet<Agreement> Agreements { get; set; }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<Consultation> Consultations { get; set; }

    public virtual DbSet<Credit> Credits { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Dealer> Dealers { get; set; }

    public virtual DbSet<DealerCar> DealerCars { get; set; }

    public virtual DbSet<Guest> Guests { get; set; }

    public virtual DbSet<LetterOfIntent> LetterOfIntents { get; set; }

    public virtual DbSet<OrderCust> OrderCusts { get; set; }

    public virtual DbSet<OtherBenefit> OtherBenefits { get; set; }

    public virtual DbSet<PaymentHistory> PaymentHistories { get; set; }

    public virtual DbSet<SalesPerson> SalesPeople { get; set; }

    public virtual DbSet<Scheduling> Schedulings { get; set; }

    public virtual DbSet<TestDrive> TestDrives { get; set; }

    public virtual DbSet<Warranty> Warranties { get; set; }

    public virtual DbSet<WarrantyClaim> WarrantyClaims { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        base.OnConfiguring(optionsBuilder);
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseSqlServer("Data Source=.\\;Initial Catalog=FinalProjectDBB;User ID=sa;Password=Laripagisql65;TrustServerCertificate=True");
        }
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        modelBuilder.Entity<Agreement>(entity =>
        {
            entity.HasKey(e => e.AgreementId).HasName("PK__Agreemen__0A3082C3FD860975");

            entity.ToTable("Agreement");

            entity.HasIndex(e => e.Loiid, "UQ__Agreemen__E21E1B4DF2A39B1F").IsUnique();

            entity.Property(e => e.AgreementId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreditId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealerCarId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Loiid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LOIId");
            entity.Property(e => e.MethodPayment)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Spid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SPId");

            entity.HasOne(d => d.Credit).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.CreditId)
                .HasConstraintName("FK__Agreement__Credi__6383C8BA");

            entity.HasOne(d => d.Customer).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__Custo__628FA481");

            entity.HasOne(d => d.DealerCar).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.DealerCarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__Deale__66603565");

            entity.HasOne(d => d.Loi).WithOne(p => p.Agreement)
                .HasForeignKey<Agreement>(d => d.Loiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__LOIId__6477ECF3");

            entity.HasOne(d => d.Sp).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.Spid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__SPId__656C112C");
        });

        modelBuilder.Entity<Car>(entity =>
        {
            entity.HasKey(e => e.CarId).HasName("PK__Car__68A0342E2DDE18FD");

            entity.ToTable("Car");

            entity.Property(e => e.CarId)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FuelType)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ModelType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Consultation>(entity =>
        {
            entity.HasKey(e => e.ConsultId).HasName("PK__Consulta__28859B35C3BE7640");

            entity.ToTable("Consultation");

            entity.HasIndex(e => e.ScheduleId, "UQ__Consulta__9C8A5B485E7C1B57").IsUnique();

            entity.Property(e => e.ConsultId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConsultDate).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.Spid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SPId");

            entity.HasOne(d => d.Schedule).WithOne(p => p.Consultation)
                .HasForeignKey<Consultation>(d => d.ScheduleId)
                .HasConstraintName("FK__Consultat__Sched__45F365D3");

            entity.HasOne(d => d.Sp).WithMany(p => p.Consultations)
                .HasForeignKey(d => d.Spid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Consultati__SPId__46E78A0C");
        });

        modelBuilder.Entity<Credit>(entity =>
        {
            entity.HasKey(e => e.CreditId).HasName("PK__Credit__ED5ED0BB4FDED891");

            entity.ToTable("Credit");

            entity.Property(e => e.CreditId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StatusCredit)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Customer).WithMany(p => p.Credits)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Credit__Customer__5EBF139D");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64D8565529E2");

            entity.ToTable("Customer");

            entity.HasIndex(e => e.Tdid, "UQ__Customer__B7317AA5C135F192").IsUnique();

            entity.Property(e => e.CustomerId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IdCardNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Tdid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TDId");

            entity.HasOne(d => d.Td).WithOne(p => p.Customer)
                .HasForeignKey<Customer>(d => d.Tdid)
                .HasConstraintName("FK__Customer__TDId__571DF1D5");
        });

        modelBuilder.Entity<Dealer>(entity =>
        {
            entity.HasKey(e => e.DealerId).HasName("PK__Dealer__CA2F8EB23B9D453B");

            entity.ToTable("Dealer");

            entity.Property(e => e.DealerId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealerAddress)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealerName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Province)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DealerCar>(entity =>
        {
            entity.HasKey(e => e.DealerCarId).HasName("PK__DealerCa__7DD0B586BE23DD5E");

            entity.ToTable("DealerCar");

            entity.Property(e => e.DealerCarId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CarId)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DealerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Car).WithMany(p => p.DealerCars)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerCar__CarId__4BAC3F29");

            entity.HasOne(d => d.Dealer).WithMany(p => p.DealerCars)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerCar__Deale__4CA06362");
        });

        modelBuilder.Entity<Guest>(entity =>
        {
            entity.HasKey(e => e.GuestId).HasName("PK__Guest__0C423C12FC1E9990");

            entity.ToTable("Guest");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GuestName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LetterOfIntent>(entity =>
        {
            entity.HasKey(e => e.Loiid).HasName("PK__LetterOf__E21E1B4C9E363136");

            entity.ToTable("LetterOfIntent");

            entity.Property(e => e.Loiid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LOIId");
        });

        modelBuilder.Entity<OrderCust>(entity =>
        {
            entity.HasKey(e => e.Ocid).HasName("PK__OrderCus__A2E5E9FC1A764012");

            entity.ToTable("OrderCust");

            entity.Property(e => e.Ocid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OCId");
            entity.Property(e => e.CustomerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Dcid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DCId");
            entity.Property(e => e.Loiid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LOIId");

            entity.HasOne(d => d.Customer).WithMany(p => p.OrderCusts)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__OrderCust__Custo__59FA5E80");

            entity.HasOne(d => d.Dc).WithMany(p => p.OrderCusts)
                .HasForeignKey(d => d.Dcid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__OrderCust__DCId__5AEE82B9");

            entity.HasOne(d => d.Loi).WithMany(p => p.OrderCusts)
                .HasForeignKey(d => d.Loiid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__OrderCust__LOIId__5BE2A6F2");
        });

        modelBuilder.Entity<OtherBenefit>(entity =>
        {
            entity.HasKey(e => e.AgreementId).HasName("PK__OtherBen__0A3082C32F234FA7");

            entity.ToTable("OtherBenefit");

            entity.Property(e => e.AgreementId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Benefit)
                .IsRequired()
                .HasColumnType("text");

            entity.HasOne(d => d.Agreement).WithOne(p => p.OtherBenefit)
                .HasForeignKey<OtherBenefit>(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__OtherBene__Agree__6C190EBB");
        });

        modelBuilder.Entity<PaymentHistory>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__PaymentH__9B556A38248B13A0");

            entity.ToTable("PaymentHistory");

            entity.Property(e => e.PaymentId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AgreementId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Agreement).WithMany(p => p.PaymentHistories)
                .HasForeignKey(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PaymentHi__Agree__693CA210");
        });

        modelBuilder.Entity<SalesPerson>(entity =>
        {
            entity.HasKey(e => e.Spid).HasName("PK__SalesPer__F4306129AC01A97B");

            entity.ToTable("SalesPerson");

            entity.Property(e => e.Spid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SPId");
            entity.Property(e => e.DealerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Dealer).WithMany(p => p.SalesPeople)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesPers__Deale__3D5E1FD2");
        });

        modelBuilder.Entity<Scheduling>(entity =>
        {
            entity.HasKey(e => e.ScheduleId).HasName("PK__Scheduli__9C8A5B4930CCD65E");

            entity.ToTable("Scheduling");

            entity.Property(e => e.AvailableEnd).HasColumnType("datetime");
            entity.Property(e => e.AvailableStart).HasColumnType("datetime");
            entity.Property(e => e.DealerId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Program)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Dealer).WithMany(p => p.Schedulings)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Schedulin__Deale__4222D4EF");

            entity.HasOne(d => d.Guest).WithMany(p => p.Schedulings)
                .HasForeignKey(d => d.GuestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Schedulin__Guest__412EB0B6");
        });

        modelBuilder.Entity<TestDrive>(entity =>
        {
            entity.HasKey(e => e.Tdid).HasName("PK__TestDriv__B7317AA4CBF1953F");

            entity.ToTable("TestDrive");

            entity.HasIndex(e => e.ScheduleId, "UQ__TestDriv__9C8A5B481FF293B3").IsUnique();

            entity.Property(e => e.Tdid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TDId");
            entity.Property(e => e.ConsultId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealerCarId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.Spid)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SPId");
            entity.Property(e => e.Tddate)
                .HasColumnType("datetime")
                .HasColumnName("TDDate");

            entity.HasOne(d => d.Consult).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.ConsultId)
                .HasConstraintName("FK__TestDrive__Consu__5070F446");

            entity.HasOne(d => d.DealerCar).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.DealerCarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Deale__534D60F1");

            entity.HasOne(d => d.Schedule).WithOne(p => p.TestDrive)
                .HasForeignKey<TestDrive>(d => d.ScheduleId)
                .HasConstraintName("FK__TestDrive__Sched__5165187F");

            entity.HasOne(d => d.Sp).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.Spid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__SPId__52593CB8");
        });

        modelBuilder.Entity<Warranty>(entity =>
        {
            entity.HasKey(e => e.WarrantyId).HasName("PK__Warranty__2ED31813A2600B22");

            entity.ToTable("Warranty");

            entity.HasIndex(e => e.AgreementId, "UQ__Warranty__0A3082C2D84397B5").IsUnique();

            entity.Property(e => e.WarrantyId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AgreementId)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Agreement).WithOne(p => p.Warranty)
                .HasForeignKey<Warranty>(d => d.AgreementId)
                .HasConstraintName("FK__Warranty__Agreem__6FE99F9F");
        });

        modelBuilder.Entity<WarrantyClaim>(entity =>
        {
            entity.HasKey(e => e.ClaimId).HasName("PK__Warranty__EF2E139BB6417D70");

            entity.ToTable("WarrantyClaim");

            entity.Property(e => e.ClaimId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.ServiceCenter)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarrantyId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Warranty).WithMany(p => p.WarrantyClaims)
                .HasForeignKey(d => d.WarrantyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WarrantyC__Warra__72C60C4A");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}